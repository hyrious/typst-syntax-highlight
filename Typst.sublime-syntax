%YAML 1.2
---
# - https://www.sublimetext.com/docs/syntax.html
# - https://typst.app/docs/reference/syntax

file_extensions:
  - typ

# Ad. Read Sublime Text docs in dark mode using the user style:
# - https://userstyles.world/api/style/9109.user.css
# - https://gist.github.com/hyrious/0bc29547b469da34eed9af5c91315a8b (backup)

name: Typst
scope: text.typst
version: 2

variables:
  html_entity: '&([a-zA-Z0-9]+|#\d+|#[Xx]\h+);'
  no_escape_behind: '(?<![^\\]\\)(?<![\\]{3})'
  markup_symbol_shorthands: (\.\.\.|---?|-\?|~)
  math_symbol_shorthands: (->>?|-->|::?=|!=|\[\||<==?>|<--?>|<--?|<-<|<<-|<<<?|<==?|<~~?|>->|>>>?|==?>|=:|>=|\|[-=]>|\|\]|\|\||~~?>|')
  greeks: (alpha|beta|gamma|delta|epsilon|varepsilon|zeta|eta|theta|vartheta|iota|gamma|kappa|lambda|mu|nu|xi|pi|varpi|rho|varrho|sigma|varsigma|tau|upsilon|phi|varphi|chi|psi|omega|Gamma|Delta|Theta|Lambda|Xi|Pi|Sigma|Upsilon|Phi|Psi|Omega)
  non_raw_ident: '[[:alpha:]][-_[:alnum:]]*|_[-_[:alnum:]]+'
  identifier: '(?:{{non_raw_ident}})'
  operators: ([+*/]=?|\B-=?|=>|==?|[<>]=?|\bnot\s+in\b)
  prefixes: (?:(?:include|import|set|let|if|for|while|show|context|regex)\b)
  not_begin_of_emph: '[a-zA-Z0-9]'
  not_end_of_emph: '[a-zA-Z0-9]'

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    - include: markups

  # https://typst.app/docs/reference/syntax/#markup
  markups:
    - include: headings
    - include: list-blocks
    - include: fenced-code-blocks
    - include: terms
    - include: inlines

  # https://typst.app/docs/reference/syntax/#comments
  comments:
    - include: line-comments
    - include: block-comments

  line-comments:
    - match: //+
      scope: punctuation.definition.comment.typst
      push: line-comment-body

  line-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.line.double-dash.typst
    - match: \n
      pop: true

  block-comments:
    - match: /\*\*+/
      scope: comment.block.empty.typst punctuation.definition.comment.typst
    - match: /\*\*+
      scope: comment.block.documentation.typst punctuation.definition.comment.begin.typst
      push: doc-comment-body
    - match: /\*
      scope: punctuation.definition.comment.begin.typst
      push: block-comment-body

  block-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.typst
    - include: block-comments
    - include: block-comment-end

  block-comment-end:
    - match: \*+/
      scope: punctuation.definition.comment.end.typst
      pop: true

  doc-comment-body:
    - meta_include_prototype: false
    - meta_scope: comment.block.documentation.typst
    - include: block-comment-end
    - match: ^\s*(\*)(?!/)
      captures:
        1: punctuation.definition.comment.typst

###[ Block ]##################################################################

  # https://typst.app/docs/reference/meta/heading
  headings:
    - match: ^\s*(=+)\s+
      captures:
        1: punctuation.definition.heading.begin.typst
      push: heading-content

  heading-content:
    - meta_scope: markup.heading.typst
    - meta_content_scope: entity.name.section.typst
    - match: \s*$\n?
      scope: meta.whitespace.newline.typst
      pop: true
    - include: inlines

  list-blocks:
    # https://typst.app/docs/reference/model/list
    - match: ^\s*(-)\s
      captures:
        1: markup.list.unnumbered.bullet.typst punctuation.definition.list_item.typst
      push: unordered-list-block
    # https://typst.app/docs/reference/model/enum
    - match: ^\s*(\+)\s
      captures:
        1: markup.list.numbered.bullet.typst punctuation.definition.list_item.typst
      push: ordered-list-block
    - match: ^\s*(\d{1,9}([.]))\s
      captures:
        1: markup.list.numbered.bullet.typst punctuation.definition.list_item.typst
      push: ordered-list-block

  unordered-list-block:
    - meta_content_scope: markup.list.unnumbered.typst
    - include: list-block-end
    - include: list-block-content

  ordered-list-block:
    - meta_content_scope: markup.list.numbered.typst
    - include: list-block-end
    - include: list-block-content

  list-block-end:
    - match: ^(?=\S)
      pop: true
    - match: ^(?=\s*\])
      pop: true

  list-block-content:
    - include: list-items
    - include: markups

  list-items:
    - match: \s*(-)\s
      captures:
        1: markup.list.unnumbered.bullet.typst punctuation.definition.list_item.typst
    - match: \s*(\+)\s
      captures:
        1: markup.list.numbered.bullet.typst punctuation.definition.list_item.typst
    - match: \s*(\d{1,9}([.]))\s
      captures:
        1: markup.list.numbered.bullet.typst punctuation.definition.list_item.typst

  # https://typst.app/docs/reference/text/raw
  fenced-code-blocks:
    - match: (?=`{3,})
      push: fenced-code-block-content

  fenced-code-block-content:
    - meta_scope: meta.code-fence.typst
    - include: fenced-syntaxes
    - include: fenced-raw
    - match: ''
      pop: true

  fenced-syntaxes:
    - include: fenced-actionscript
    - include: fenced-applescript
    - include: fenced-clojure
    - include: fenced-c
    - include: fenced-cpp
    - include: fenced-csharp
    - include: fenced-css
    - include: fenced-diff
    - include: fenced-dosbatch
    - include: fenced-erlang
    - include: fenced-graphviz
    - include: fenced-golang
    - include: fenced-haskell
    - include: fenced-html-php
    - include: fenced-html
    - include: fenced-java
    - include: fenced-javascript
    - include: fenced-jsonc
    - include: fenced-jspx
    - include: fenced-jsx
    - include: fenced-latex
    - include: fenced-lisp
    - include: fenced-lua
    - include: fenced-makefile
    - include: fenced-matlab
    - include: fenced-objc
    - include: fenced-objcpp
    - include: fenced-ocaml
    - include: fenced-perl
    - include: fenced-php
    - include: fenced-python
    - include: fenced-regexp
    - include: fenced-rscript
    - include: fenced-ruby
    - include: fenced-rust
    - include: fenced-scala
    - include: fenced-shell
    - include: fenced-shell-script
    - include: fenced-sql
    - include: fenced-tsx
    - include: fenced-typescript
    - include: fenced-typst
    - include: fenced-xml
    - include: fenced-yaml

  fenced-actionscript:
    - match: (`{3,})((?i:actionscript|as))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.actionscript.2
      embed_scope: markup.raw.block.actionscript.typst source.actionscript.2
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-applescript:
    - match: (`{3,})((?i:applescript|osascript))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.applescript
      embed_scope: markup.raw.block.applescript.typst source.applescript
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-clojure:
    - match: (`{3,})((?i:clojure|clj))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.clojure
      embed_scope: markup.raw.block.clojure.typst source.clojure
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-c:
    - match: (`{3,})((?i:c|h))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.c
      embed_scope: markup.raw.block.c.typst source.c
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-cpp:
    - match: (`{3,})((?i:c\+\+|cc|cpp|cxx|h\+\+|hpp|hxx))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.c++
      embed_scope: markup.raw.block.cpp.typst source.c++
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-csharp:
    - match: (`{3,})((?i:csharp|c\#|cs))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.cs
      embed_scope: markup.raw.block.csharp.typst source.cs
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-css:
    - match: (`{3,})((?i:css))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.css
      embed_scope: markup.raw.block.css.typst source.css
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-diff:
    - match: (`{3,})((?i:diff|patch))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.diff
      embed_scope: markup.raw.block.diff.typst source.diff
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-dosbatch:
    - match: (`{3,})((?i:bat|cmd|dos))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.dosbatch
      embed_scope: markup.raw.block.dosbatch.typst source.dosbatch
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-erlang:
    - match: (`{3,})((?i:erlang|escript))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.erlang
      embed_scope: markup.raw.block.erlang.typst source.erlang
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-graphviz:
    - match: (`{3,})((?i:graphviz))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.dot
      embed_scope: markup.raw.block.graphviz.typst source.dot
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-golang:
    - match: (`{3,})((?i:go(?:lang)?))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.go
      embed_scope: markup.raw.block.golang.typst source.go
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-haskell:
    - match: (`{3,})((?i:haskell))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.haskell
      embed_scope: markup.raw.block.haskell.typst source.haskell
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-html-php:
    - match: (`{3,})((?i:html\+php))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:embedding.php
      embed_scope: markup.raw.block.html-php.typst embedding.php
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-html:
    - match: (`{3,})((?i:html))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:text.html.basic
      embed_scope: markup.raw.block.html.typst text.html.basic
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-java:
    - match: (`{3,})((?i:java))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.java
      embed_scope: markup.raw.block.java.typst source.java
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-javascript:
    - match: (`{3,})((?i:javascript|js))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.js
      embed_scope: markup.raw.block.javascript.typst source.js
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-jsonc:
    - match: (`{3,})((?i:jsonc?))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.json
      embed_scope: markup.raw.block.jsonc.typst source.json
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-jspx:
    - match: (`{3,})((?i:jspx?))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:text.html.jsp
      embed_scope: markup.raw.block.jspx.typst text.html.jsp
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-jsx:
    - match: (`{3,})((?i:jsx))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.jsx
      embed_scope: markup.raw.block.jsx.typst source.jsx
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-latex:
    - match: (`{3,})((?i:tex|latex))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:text.tex.latex
      embed_scope: markup.raw.block.latex.typst text.tex.latex
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-lisp:
    - match: (`{3,})((?i:lisp))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.lisp
      embed_scope: markup.raw.block.lisp.typst source.lisp
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-lua:
    - match: (`{3,})((?i:lua))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.lua
      embed_scope: markup.raw.block.lua.typst source.lua
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-makefile:
    - match: (`{3,})((?i:makefile))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.makefile
      embed_scope: markup.raw.block.makefile.typst source.makefile
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-matlab:
    - match: (`{3,})((?i:matlab))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.matlab
      embed_scope: markup.raw.block.matlab.typst source.matlab
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-objc:
    - match: (`{3,})((?i:objc|obj-c|objectivec|objective-c))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.objc
      embed_scope: markup.raw.block.objc.typst source.objc
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-objcpp:
    - match: (`{3,})((?i:objc\+\+|obj-c\+\+|objectivec\+\+|objective-c\+\+))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.objc++
      embed_scope: markup.raw.block.objcpp.typst source.objc++
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-ocaml:
    - match: (`{3,})((?i:ocaml))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.ocaml
      embed_scope: markup.raw.block.ocaml.typst source.ocaml
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-perl:
    - match: (`{3,})((?i:perl))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.perl
      embed_scope: markup.raw.block.perl.typst source.perl
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-php:
    - match: (`{3,})((?i:php|inc))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.php
      embed_scope: markup.raw.block.php.typst source.php
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-python:
    - match: (`{3,})((?i:python|py))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.python
      embed_scope: markup.raw.block.python.typst source.python
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-regexp:
    - match: (`{3,})((?i:regexp?))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.regexp
      embed_scope: markup.raw.block.regexp.typst source.regexp
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-rscript:
    - match: (`{3,})((?i:rscript|r|splus))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.r
      embed_scope: markup.raw.block.rscript.typst source.r
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-ruby:
    - match: (`{3,})((?i:ruby|rb|rbx))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.ruby
      embed_scope: markup.raw.block.ruby.typst source.ruby
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-rust:
    - match: (`{3,})((?i:rust|rs))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.rust
      embed_scope: markup.raw.block.rust.typst source.rust
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-scala:
    - match: (`{3,})((?i:scala))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.scala
      embed_scope: markup.raw.block.scala.typst source.scala
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-shell:
    - match: (`{3,})((?i:console|shell))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.shell.interactive.markdown
      embed_scope: markup.raw.block.shell.typst source.shell.interactive.markdown
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-shell-script:
    - match: (`{3,})((?i:shell-script|sh|bash|zsh))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.shell.bash
      embed_scope: markup.raw.block.shell-script.typst source.shell.bash
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-sql:
    - match: (`{3,})((?i:sql))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.sql
      embed_scope: markup.raw.block.sql.typst source.sql
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-tsx:
    - match: (`{3,})((?i:tsx))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.tsx
      embed_scope: markup.raw.block.tsx.typst source.tsx
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-typescript:
    - match: (`{3,})((?i:typescript|ts))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.ts
      embed_scope: markup.raw.block.typescript.typst source.ts
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-typst:
    - match: (`{3,})((?i:typst|typ))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:text.typst
      embed_scope: markup.raw.block.typst.typst text.typst
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst
    - match: (`{3,})((?i:typc))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:text.typst#script-common
      embed_scope: markup.raw.block.typst.typst text.typst
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-xml:
    - match: (`{3,})((?i:atom|plist|svg|xjb|xml|xsd|xsl))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:text.xml
      embed_scope: markup.raw.block.xml.typst text.xml
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-yaml:
    - match: (`{3,})((?i:yaml|yml))($\n?|\b)
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst
        2: constant.other.language-name.typst
      embed: scope:source.yaml
      embed_scope: markup.raw.block.yaml.typst source.yaml
      escape: '(?:^[ \t]*)?(\1)\s*'
      escape_captures:
        1: punctuation.definition.raw.code-fence.end.typst

  fenced-raw:
    - meta_content_scope: markup.raw.block.typst
    - match: (`{3,})([[:alpha:]][^\s`]+)?($\n?)?
      captures:
        1: punctuation.definition.raw.code-fence.begin.typst meta.test.typst
        2: constant.other.language-name.typst
      push: fenced-raw-content

  fenced-raw-content:
    - meta_include_prototype: false
    - meta_content_scope: markup.raw.block.typst
    - match: '(?:^[ \t]*)?(\1)\s*($\n?)?'
      captures:
        1: punctuation.definition.raw.code-fence.end.typst
      pop: true

  # https://typst.app/docs/reference/model/terms
  terms:
    - match: ^\s*(/)[ ]
      captures:
        1: punctuation.definition.term.typst
      push: term-body

  term-body:
    - meta_scope: markup.terms.typst
    - meta_content_scope: entity.name.enum.typst
    - match: ':'
      scope: punctuation.separator.key-value.typst
      pop: true
    - match: ^(?=\S)
      pop: true
    - include: markups

###[ Inline ]#################################################################

  inlines:
    - include: hard-line-breaks
    - include: emphasis
    - include: literals
    - include: links
    - include: labels
    - include: refs
    - include: symbols
    - include: maths
    - include: scripts

  # https://typst.app/docs/reference/text/linebreak
  hard-line-breaks:
    - match: (\\)[\s\n]
      captures:
        0: meta.hard-line-break.typst
        1: constant.character.escape.typst

  emphasis:
    - include: bold-italic
    - include: italic-bold
    - include: bold
    - include: italic

  # https://typst.app/docs/reference/text/strong
  bold:
    - match: (?<!{{not_begin_of_emph}})\*
      scope: punctuation.definition.bold.begin.typst
      push: bold-content

  bold-content:
    - meta_scope: markup.bold.typst
    - match: \*(?!{{not_end_of_emph}})
      scope: punctuation.definition.bold.end.typst
      pop: true
    - include: inlines

  # https://typst.app/docs/reference/text/emph
  italic:
    - match: (?<!{{not_begin_of_emph}})_
      scope: punctuation.definition.italic.begin.typst
      push: italic-content

  italic-content:
    - meta_scope: markup.italic.typst
    - match: _(?!{{not_end_of_emph}})
      scope: punctuation.definition.italic.end.typst
      pop: true
    - include: inlines

  bold-italic:
    - match: (?<!{{not_begin_of_emph}})(\*)(_)
      captures:
        1: punctuation.definition.bold.begin.typst
        2: punctuation.definition.italic.begin.typst
      push:
        - bold-content
        - bold-italic-content

  bold-italic-content:
    - meta_scope: markup.italic.typst
    - match: (_)(\*)(?!{{not_end_of_emph}})
      captures:
        1: punctuation.definition.italic.end.typst
        2: punctuation.definition.bold.end.typst
      pop: 2
    - include: italic-content

  italic-bold:
    - match: (?<!{{not_begin_of_emph}})(_)(\*)
      captures:
        1: punctuation.definition.italic.begin.typst
        2: punctuation.definition.bold.begin.typst
      push:
        - italic-content
        - italic-bold-content

  italic-bold-content:
    - meta_scope: markup.bold.typst
    - match: (\*)(_)(?!{{not_end_of_emph}})
      captures:
        1: punctuation.definition.bold.end.typst
        2: punctuation.definition.italic.end.typst
      pop: 2
    - include: bold-content

  literals:
    - include: fenced-code-blocks
    - include: code-spans
    - include: escaped-char

  # https://typst.app/docs/reference/text/raw
  code-spans:
    - match: (`)
      scope: punctuation.definition.raw.begin.typst
      push: code-span-body

  code-span-body:
    - meta_include_prototype: false
    - meta_scope: markup.raw.inline.typst
    - match: \1(?!`)
      scope: punctuation.definition.raw.end.typst
      pop: true
    - match: (`+)

  # https://typst.app/docs/reference/meta/link
  links:
    - match: https?(://)[-\w]+
      captures:
        1: punctuation.separator.path.typst
      push: link-content

  link-content:
    - meta_scope: markup.underline.link.typst
    - match: (?=\s)
      pop: true
    - include: link-common

  link-common:
    - match: \(
      push: link-group
    - include: link-url-path-separators
    - include: link-url-escapes

  link-group:
    - match: \)
      pop: true
    - match: (?=(?:{{html_entity}})*[?!.,:*_~]*[\s<])
      pop: true
    - include: link-common

  link-url-path-separators:
    - match: '[/&?#]'
      scope: punctuation.separator.path.typst

  link-url-escapes:
    - match: (%)\h{2}
      scope: constant.character.escape.url.typst
      captures:
        1: punctuation.definition.escape.typst

  # https://typst.app/docs/reference/construct/label
  labels:
    - match: '(<)([-_\w]+)(>)'
      scope: storage.modifier.label.typst
      captures:
        1: punctuation.definition.label.begin.typst
        2: entity.name.label.typst
        3: punctuation.definition.label.end.typst

  # https://typst.app/docs/reference/meta/ref
  refs:
    - match: '(@)[-_\w]+'
      scope: constant.other.reference.typst
      captures:
        1: punctuation.definition.reference.typst
      push: maybe-ref-content

  maybe-ref-content:
    - match: '\['
      scope: punctuation.definition.generic.begin.typst
      push: ref-content
    - match: ''
      pop: true

  ref-content:
    - match: '\]'
      scope: punctuation.definition.generic.end.typst
      pop: true
    - include: inlines

  # https://typst.app/docs/reference/symbols/sym
  symbols:
    - match: (#)(?!{{prefixes}})({{identifier}}(?:(\.){{identifier}})*)(?=[\[\(])
      scope: support.other.typst variable.function.typst
      captures:
        1: punctuation.definition.expression.typst
        3: punctuation.accessor.typst
      push: maybe-script-function-content
    - match: (#)(?!{{prefixes}})({{identifier}}(?:(\.){{identifier}})*)
      scope: meta.expression.typst constant.other.symbol.typst
      captures:
        1: punctuation.definition.variable.typst
        3: punctuation.accessor.typst
    - match: '{{markup_symbol_shorthands}}'
      scope: constant.other.typst

###[ Math ]###################################################################

  # https://typst.app/docs/reference/math
  maths:
    - match: \$
      scope: string.other.math.typst punctuation.definition.math.begin.typst
      push: math-content

  math-content:
    - meta_scope: markup.math.typst
    - match: \$
      scope: string.other.math.typst punctuation.definition.math.end.typst
      pop: true
    - include: math-common

  math-common:
    - include: greeks
    - include: math-functions
    - include: math-brackets
    - include: math-numerics
    - include: math-symbols
    - include: math-operators
    - include: symbols
    - include: strings
    - include: scripts

  greeks:
    - match: '\b{{greeks}}\b'
      captures:
        1: support.constant.greek.math.typst

  math-functions:
    - match: '(\.)?([[:alpha:]]+)(\()'
      captures:
        1: punctuation.accessor.typst
        2: support.function.math.typst
        3: punctuation.section.group.begin.typst
      push: math-function-params
    - match: '(\.)?([[:alpha:]]{2,})'
      captures:
        1: punctuation.accessor.typst
        2: support.function.math.typst
    - match: '(\.)?([[:alpha:]])'
      captures:
        1: punctuation.accessor.typst
        2: variable.other.math.typst

  math-brackets:
    - match: '\('
      scope: constant.character.parenthesis.typst
      push: math-bracket-content

  math-bracket-content:
    - match: (?=\$)
      pop: true
    - match: (\))
      captures:
        1: constant.character.parenthesis.typst
      pop: true
    - include: math-common
    - include: script-symbols

  math-function-params:
    - match: (?=\$)
      pop: true
    - match: (\))
      captures:
        1: punctuation.section.group.end.typst
      pop: true
    - include: math-common
    - include: script-symbols

  math-numerics:
    - match: \b(0x)(\h+)
      scope: meta.number.integer.hexadecimal.typst
      captures:
        1: constant.numeric.base.typst
        2: constant.numeric.value.typst
    - match: \b(0o)([0-7]+)
      scope: meta.number.integer.octal.typst
      captures:
        1: constant.numeric.base.typst
        2: constant.numeric.value.typst
    - match: \b(0b)([01]+)
      scope: meta.number.integer.binary.typst
      captures:
        1: constant.numeric.base.typst
        2: constant.numeric.value.typst
    - match: (\d*(\.)\d+(?:[eE][-+]?\d+)?|\d+[eE][-+]?\d+)(%|(?:pt|mm|cm|in|em|deg|rad|fr)\b)?
      scope: meta.number.float.decimal.typst
      captures:
        1: constant.numeric.value.typst
        2: punctuation.separator.decimal.typst
        3: constant.numeric.suffix.typst
    - match: \b(\d+)(%|(?:pt|mm|cm|in|em|deg|rad|fr)\b)?
      scope: meta.number.integer.decimal.typst
      captures:
        1: constant.numeric.value.typst
        2: constant.numeric.suffix.typst

  math-symbols:
    - match: '{{math_symbol_shorthands}}'
      scope: constant.other.typst
    - match: '&'
      scope: constant.character.ampersand.typst
    - match: '~'
      scope: constant.character.space.typst
    - include: escaped-char
    - include: hard-line-breaks

  escaped-char:
    - match: '(\\)[\S\s]'
      scope: constant.character.escape.typst
      captures:
        1: punctuation.definition.backslash.typst

  math-operators:
    - match: \+|\-|=|-|\*|/|\^|_|<|>
      scope: keyword.operator.math.typst

###[ Scripting ]##############################################################

  # https://typst.app/docs/reference/scripting
  scripts:
    - match: (#)(?={{prefixes}})
      captures:
        1: keyword.other.typst punctuation.definition.expression.typst
      push: script-statement
    - match: '#'
      scope: keyword.other.typst punctuation.definition.expression.typst
      push: script-expression

  script-statement:
    - meta_scope: meta.expression.typst
    - match: (?=[\]])|$\n?
      #      ^ matching a random "expression" is hard, stop early when seeing newline or ]
      pop: true
    - include: script-common

  script-expression:
    - meta_scope: meta.expression.typst
    - match: (?=[\s\]\$\:])
      #      ^ stop scripting when seeing space or ] or $ or :, maybe wrong
      pop: true
    - include: script-common

  script-common:
    - include: script-blocks
    - include: content-blocks
    - include: maths
    - include: regexes
    - include: escaped-char
    - include: labels
    #          ^ not knowing the boundary of one-liners..
    - include: statements

  script-blocks:
    - match: '{'
      scope: punctuation.section.group.begin.typst
      push: script-block-content
    - match: \(
      scope: punctuation.section.group.begin.typst
      push: script-dictionary

  script-block-content:
    - match: '}'
      scope: punctuation.section.group.end.typst
      pop: true
    - include: script-common

  script-dictionary:
    - match: \)
      scope: punctuation.section.group.end.typst
      pop: true
    - include: script-common

  content-blocks:
    - match: \[
      scope: punctuation.section.group.begin.typst
      push: content-block-content

  content-block-content:
    - match: \]
      scope: punctuation.section.group.end.typst
      pop: true
    - include: markups

  statements:
    - include: strings
    - include: fenced-code-blocks
    - include: code-spans
    - include: script-functions
    - include: keywords
    - include: script-operators
    - include: script-symbols
    - include: math-numerics
    - include: hard-line-breaks

  keywords:
    - match: '(?<!-)\b(include|import)\b(?!-)'
      scope: keyword.import.typst
    - match: '(?<!-)\b(as)\b(?!-)'
      scope: keyword.control.import.as.typst
    - match: '(?<!-)\b(let|set|show|context)\b(?!-)'
      scope: keyword.declaration.typst
    - match: '(?<!-)\b(if|else|for|while|break|continue|return)\b(?!-)'
      scope: keyword.control.typst
    - match: '(?<!-)\b(none)\b(?!-)'
      scope: constant.language.null.typst
    - match: '(?<!-)\b(auto)\b(?!-)'
      scope: constant.language.auto.typst
    - match: '(?<!-)\b(true|false)\b(?!-)'
      scope: constant.language.boolean.typst

  script-operators:
    - match: '(?<!-)\b(in|and|not|or)\b(?!-)'
      captures:
        1: keyword.operator.typst
    - match: '{{operators}}'
      captures:
        1: keyword.operator.typst

  script-symbols:
    - match: ':'
      scope: punctuation.separator.key-value.typst
    - match: ','
      scope: punctuation.separator.typst
    - match: ';'
      scope: punctuation.terminator.typst
    - match: '\.\.'
      scope: keyword.operator.range.typst
    - match: '='
      scope: keyword.operator.assignment.typst

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.typst
      push: string-content

  string-content:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.typst
    - include: escaped-char
    - match: '"'
      scope: punctuation.definition.string.end.typst
      pop: true

  maybe-script-function-content:
    - meta_scope: meta.expression.typst
    - match: (?:(\.)({{identifier}}))?(\()
      captures:
        1: punctuation.accessor.typst
        2: support.function.typst
        3: punctuation.section.group.begin.typst
      push: script-function-params
    - match: (?:(\.)({{identifier}}))?(\[)
      captures:
        1: punctuation.accessor.typst
        2: support.function.typst
        3: punctuation.section.group.begin.typst
      push: content-block-content
    - match: ''
      pop: true

  # https://typst.app/docs/reference/foundations/regex
  # https://docs.rs/regex/latest/regex/#syntax
  # The JavaScript's regex definition is quite close to Typst's
  regexes:
    - match: '\b(regex)(\()(")'
      captures:
        1: support.function.typst
        2: punctuation.section.group.begin.typst
        3: punctuation.definition.string.begin.typst
      push:
        - script-function-params
        - regex-string-body
    - match: '\b(regex)(\()(`)'
      captures:
        1: support.function.typst
        2: punctuation.section.group.begin.typst
        3: markup.raw.inline.typst punctuation.definition.raw.begin.typst
      push:
        - script-function-params
        - regex-raw-body

  regex-string-body:
    - meta_include_prototype: false
    - meta_content_scope: string.regexp.typst
    - match: '(?<!\\)"'
      scope: punctuation.definition.string.end.typst
      pop: true
    - include: scope:source.regexp.js

  regex-raw-body:
    - meta_content_scope: markup.raw.inline.typst string.regexp.typst
    - match: \3(?!`)
      scope: markup.raw.inline.typst punctuation.definition.raw.end.typst
      pop: true
    - match: (`+)
    - include: scope:source.regexp.js

  script-functions:
    - match: '(\.)?({{identifier}})(\()'
      captures:
        1: punctuation.accessor.typst
        2: support.function.typst
        3: punctuation.section.group.begin.typst
      push: script-function-params
    - match: '(\.)?({{identifier}})(\[)'
      captures:
        1: punctuation.accessor.typst
        2: support.function.typst
        3: punctuation.section.group.begin.typst
      push: content-block-content

  script-function-params:
    - meta_scope: meta.function-call.arguments.typst
    - match: (\))
      captures:
        1: punctuation.section.group.end.typst
      pop: true
    - match: '({{identifier}})\s*(:)'
      captures:
        1: variable.parameter.typst
        2: punctuation.separator.parameter.typst
    - include: script-common
